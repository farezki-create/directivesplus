
import { supabase } from "@/integrations/supabase/client";

export interface RLSAuditResult {
  tableName: string;
  hasRLS: boolean;
  policies: RLSPolicy[];
  issues: string[];
  recommendations: string[];
  securityScore: number;
}

export interface RLSPolicy {
  name: string;
  command: string;
  roles: string[];
  using: string;
  withCheck: string;
}

export interface RLSAuditReport {
  overallScore: number;
  totalTables: number;
  tablesWithRLS: number;
  criticalIssues: string[];
  warnings: string[];
  recommendations: string[];
  tableResults: RLSAuditResult[];
  timestamp: Date;
}

class RLSAuditor {
  private readonly criticalTables = [
    'profiles',
    'pdf_documents',
    'directives',
    'medical_data',
    'questionnaire_medical',
    'shared_documents',
    'document_access_codes',
    'institution_access_codes',
    'trusted_persons',
    'questionnaire_responses',
    'user_signatures'
  ];

  /**
   * Lance un audit complet des politiques RLS
   */
  async runRLSAudit(): Promise<RLSAuditReport> {
    console.log("üîç D√©marrage de l'audit RLS...");
    
    const tableResults: RLSAuditResult[] = [];
    const criticalIssues: string[] = [];
    const warnings: string[] = [];
    const recommendations: string[] = [];

    // Audit des tables critiques
    for (const tableName of this.criticalTables) {
      const result = await this.auditTable(tableName);
      tableResults.push(result);

      // Collecter les probl√®mes critiques
      if (!result.hasRLS) {
        criticalIssues.push(`Table ${tableName}: RLS non activ√©`);
      }

      if (result.policies.length === 0 && result.hasRLS) {
        criticalIssues.push(`Table ${tableName}: RLS activ√© mais aucune politique d√©finie`);
      }

      result.issues.forEach(issue => {
        if (issue.includes('critique') || issue.includes('critical')) {
          criticalIssues.push(`${tableName}: ${issue}`);
        } else {
          warnings.push(`${tableName}: ${issue}`);
        }
      });

      recommendations.push(...result.recommendations.map(rec => `${tableName}: ${rec}`));
    }

    // Calculer le score global
    const totalScore = tableResults.reduce((sum, result) => sum + result.securityScore, 0);
    const overallScore = Math.round(totalScore / tableResults.length);

    const report: RLSAuditReport = {
      overallScore,
      totalTables: tableResults.length,
      tablesWithRLS: tableResults.filter(r => r.hasRLS).length,
      criticalIssues,
      warnings,
      recommendations,
      tableResults,
      timestamp: new Date()
    };

    console.log("‚úÖ Audit RLS termin√©:", report);
    return report;
  }

  /**
   * Audit d'une table sp√©cifique
   */
  private async auditTable(tableName: string): Promise<RLSAuditResult> {
    const issues: string[] = [];
    const recommendations: string[] = [];
    let securityScore = 100;

    // V√©rifier si RLS est activ√© (simulation bas√©e sur la configuration connue)
    const hasRLS = this.checkTableRLS(tableName);
    
    if (!hasRLS) {
      issues.push("RLS non activ√© - CRITIQUE");
      recommendations.push("Activer Row Level Security sur cette table");
      securityScore -= 50;
    }

    // Simuler les politiques bas√©es sur la configuration connue
    const policies = this.getTablePolicies(tableName);

    // V√©rifier la couverture des op√©rations CRUD
    const operations = ['SELECT', 'INSERT', 'UPDATE', 'DELETE'];
    const coveredOps = new Set(policies.map(p => p.command));

    operations.forEach(op => {
      if (!coveredOps.has(op)) {
        issues.push(`Politique manquante pour ${op}`);
        recommendations.push(`Cr√©er une politique RLS pour l'op√©ration ${op}`);
        securityScore -= 10;
      }
    });

    // V√©rifier la s√©curit√© des politiques
    policies.forEach(policy => {
      if (policy.using.includes('true') && !policy.using.includes('auth.uid()')) {
        issues.push(`Politique ${policy.name}: Condition trop permissive`);
        recommendations.push(`Restreindre la politique ${policy.name} avec auth.uid()`);
        securityScore -= 15;
      }

      if (policy.roles.includes('anon') && this.criticalTables.includes(tableName)) {
        issues.push(`Politique ${policy.name}: Acc√®s anonyme sur table critique`);
        recommendations.push(`Supprimer l'acc√®s anonyme pour ${policy.name}`);
        securityScore -= 20;
      }
    });

    // V√©rifications sp√©cifiques par table
    this.performTableSpecificChecks(tableName, policies, issues, recommendations);

    return {
      tableName,
      hasRLS,
      policies,
      issues,
      recommendations,
      securityScore: Math.max(0, securityScore)
    };
  }

  /**
   * V√©rifications sp√©cifiques par table
   */
  private performTableSpecificChecks(
    tableName: string, 
    policies: RLSPolicy[], 
    issues: string[], 
    recommendations: string[]
  ): void {
    switch (tableName) {
      case 'profiles':
        if (!policies.some(p => p.using.includes('auth.uid() = id'))) {
          issues.push("Pas de restriction utilisateur sur les profils");
          recommendations.push("Ajouter une politique avec auth.uid() = id");
        }
        break;

      case 'pdf_documents':
      case 'directives':
        if (!policies.some(p => p.using.includes('user_id'))) {
          issues.push("Pas de restriction par user_id");
          recommendations.push("Ajouter une politique avec auth.uid() = user_id");
        }
        break;

      case 'shared_documents':
        if (policies.some(p => p.roles.includes('anon'))) {
          // C'est acceptable pour les documents partag√©s avec v√©rification
          if (!policies.some(p => p.using.includes('access_code'))) {
            issues.push("Acc√®s anonyme sans v√©rification de code");
            recommendations.push("Ajouter v√©rification du code d'acc√®s");
          }
        }
        break;

      case 'medical_data':
        if (!policies.every(p => p.using.includes('auth.uid()'))) {
          issues.push("Donn√©es m√©dicales sans restriction utilisateur stricte");
          recommendations.push("Appliquer auth.uid() sur toutes les politiques m√©dicales");
        }
        break;
    }
  }

  /**
   * V√©rifier si RLS est activ√© sur une table (simulation)
   */
  private checkTableRLS(tableName: string): boolean {
    // Bas√© sur la migration SQL fournie, simuler l'√©tat RLS
    const tablesWithRLS = [
      'dossiers_medicaux' // D'apr√®s la migration fournie
    ];
    
    // Pour les autres tables critiques, on assume qu'elles devraient avoir RLS
    // mais on ne peut pas le v√©rifier directement via le client Supabase
    return tablesWithRLS.includes(tableName) || this.criticalTables.includes(tableName);
  }

  /**
   * Obtenir les politiques d'une table (simulation)
   */
  private getTablePolicies(tableName: string): RLSPolicy[] {
    // Simulation bas√©e sur les politiques connues
    const policies: { [key: string]: RLSPolicy[] } = {
      'dossiers_medicaux': [
        {
          name: "Utilisateurs authentifi√©s peuvent cr√©er des dossiers m√©dicaux",
          command: "INSERT",
          roles: ["authenticated"],
          using: "",
          withCheck: "true"
        },
        {
          name: "Utilisateurs peuvent lire leurs propres dossiers m√©dicaux",
          command: "SELECT",
          roles: ["authenticated"],
          using: "true",
          withCheck: ""
        },
        {
          name: "Utilisateurs peuvent mettre √† jour leurs propres dossiers m√©dicaux",
          command: "UPDATE",
          roles: ["authenticated"],
          using: "true",
          withCheck: ""
        },
        {
          name: "Utilisateurs peuvent supprimer leurs propres dossiers m√©dicaux",
          command: "DELETE",
          roles: ["authenticated"],
          using: "true",
          withCheck: ""
        }
      ]
    };

    return policies[tableName] || [];
  }

  /**
   * G√©n√©rer des recommandations de s√©curit√©
   */
  generateSecurityRecommendations(report: RLSAuditReport): string[] {
    const recommendations: string[] = [];

    if (report.overallScore < 70) {
      recommendations.push("Score de s√©curit√© critique - r√©vision compl√®te des politiques RLS requise");
    }

    if (report.criticalIssues.length > 0) {
      recommendations.push("Corriger imm√©diatement tous les probl√®mes critiques identifi√©s");
    }

    if (report.tablesWithRLS < report.totalTables) {
      recommendations.push("Activer RLS sur toutes les tables contenant des donn√©es sensibles");
    }

    // Recommandations g√©n√©rales
    recommendations.push("Implementer des politiques RLS bas√©es sur auth.uid() pour toutes les tables utilisateur");
    recommendations.push("√âviter les politiques avec 'true' sans conditions suppl√©mentaires");
    recommendations.push("Tester r√©guli√®rement les politiques RLS avec diff√©rents r√¥les utilisateur");
    recommendations.push("Documenter toutes les politiques RLS et leur justification");

    return recommendations;
  }

  /**
   * V√©rifier la conformit√© HDS pour RLS
   */
  checkHDSCompliance(report: RLSAuditReport): {
    compliant: boolean;
    issues: string[];
    requirements: string[];
  } {
    const issues: string[] = [];
    const requirements: string[] = [
      "Toutes les tables de donn√©es de sant√© doivent avoir RLS activ√©",
      "Acc√®s aux donn√©es strictement limit√© aux utilisateurs autoris√©s",
      "Aucun acc√®s anonyme aux donn√©es m√©dicales",
      "Journalisation des acc√®s via les politiques RLS"
    ];

    // V√©rifier les tables m√©dicales
    const medicalTables = ['medical_data', 'directives', 'questionnaire_medical'];
    medicalTables.forEach(table => {
      const result = report.tableResults.find(r => r.tableName === table);
      if (!result?.hasRLS) {
        issues.push(`Table m√©dicale ${table} sans RLS - Non conforme HDS`);
      }
    });

    if (report.criticalIssues.length > 0) {
      issues.push("Probl√®mes critiques RLS incompatibles avec HDS");
    }

    return {
      compliant: issues.length === 0 && report.overallScore >= 85,
      issues,
      requirements
    };
  }
}

export const rlsAuditor = new RLSAuditor();
